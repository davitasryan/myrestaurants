<?php

 $title = 'Edit Restaurant';
 $this->headTitle($title);
?>
<h1><?php echo $this->escapeHtml($title); ?></h1>
 
<div style="height:800px">
 <?php
$form = $this->form;
$form->setAttribute('action', $this->url(
    'restaurant',
    array(
        'action' => 'edit',
        'id'     => $this->id,
    )
));
 $form->prepare();

 echo $this->form()->openTag($form);
 echo $this->formHidden($form->get('id'));
 echo $this->formHidden($form->get('lat'));
 echo $this->formHidden($form->get('lng'));
 echo $this->formHidden($form->get('name'));
 echo $this->formRow($form->get('address'));
 echo $this->formRow($form->get('contact'));
 echo $this->formRow($form->get('site'));
 echo $this->formSubmit($form->get('submit'));
 echo $this->form()->closeTag();
 

 ?>
 
 <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 40%;
		width :40%;
      }
      .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      }

      #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 300px;
      }

      #pac-input:focus {
        border-color: #4d90fe;
      }

      .pac-container {
        font-family: Roboto;
      }

      #type-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
      }

      #type-selector label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
      }
      #target {
        width: 345px;
      }
    </style>

  <div id="map"></div>

 
<script>
      function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 40.19886899999999, lng: 44.528594},
          zoom: 17,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('name');
        var searchBox = new google.maps.places.SearchBox(input);
        //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }
		  
		  
		  //document.getElementById('address') = places.address;

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];
		  var address;
          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
			  console.log(place);
			address = place.formatted_address;
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };
			document.getElementById('address').value = address;
			if(typeof(place.formatted_phone_number) != 'undefined')
				document.getElementById('contact').value = place.formatted_phone_number;
			
			if(typeof(place.website) != 'undefined')
				document.getElementById('site').value = place.website;
				
			document.getElementById('latitude').value = place.geometry.location.lat();
			document.getElementById('longitude').value = place.geometry.location.lng();
			console.log(place.geometry.location.lat());
			console.log(place.geometry.location.lng());

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }
	  
	$(document).keypress(
		function(event){
			if (event.which == '13') {
				event.preventDefault();
			}
	});

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?libraries=places&callback=initAutocomplete"async defer></script>
	

</div>